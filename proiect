#include <Wire.h>
#include <LiquidCrystal_I2C.h>
bool resetSystem = true;
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Definire pinuri motor
#define MOTOR_IN1 3
#define MOTOR_IN2 4
#define MOTOR_ENA 9

#define ENC_IN 2
#define ENC_A 5
#define ENC_B 6
#define BUTTON_PIN 7

long previousMillis = 0;
long currentMillis = 0;
int interval = 100;

#define speedcontrol A0
int rpm = 0;
int motorPwm = 0;
int encoderValue = 0;
int encoderValueM = 0;
int lastCLK;
int currentCLK;
bool valueChanged = false;
float RPM_d = 0;
float e, e_prev = 0, inte, inte_prev = 0;
int dt;
unsigned long t_prev = 0;


int targetRotations = 0;        
int targetPosition = 0;        
bool settingRotations = true;   
bool settingPosition = false;   
bool moveMotor = false;    
int highSignalCount = 0;
bool moveToHome = false;
int homeEncoderCount = 0;
int homePosition = 90;


// PID 
float kp = 0.027;      
float ki = 0.00015;  
float kd = 0.01;   
float angularPosition = 0;
float kp_home = 0.103;  
float ki_home = 0.0112;
float e_home, e_prev_home = 0, inte_home = 0; 
#define IMPULSURI_PER_ROTATIE 20  


void WriteDriverVoltage(float V) {
  int PWMval = int(255 * abs(V) / 5.0);  
  if (PWMval > 255) {
    PWMval = 255;
  }
  
  if (V > 0) {
    digitalWrite(MOTOR_IN1, HIGH);
    digitalWrite(MOTOR_IN2, LOW);
  }
  else if (V < 0) {
    digitalWrite(MOTOR_IN1, LOW);
    digitalWrite(MOTOR_IN2, HIGH);
  }
  else {
    digitalWrite(MOTOR_IN1, LOW);
    digitalWrite(MOTOR_IN2, LOW);
  }

  analogWrite(MOTOR_ENA, PWMval);
}

void setup() {
    Serial.begin(9600);
    lcd.init();
    lcd.backlight();
    pinMode(MOTOR_IN1, OUTPUT);
    pinMode(MOTOR_IN2, OUTPUT);
    pinMode(MOTOR_ENA, OUTPUT);
    pinMode(ENC_A, INPUT_PULLUP);
    pinMode(ENC_B, INPUT_PULLUP);
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    lastCLK = digitalRead(ENC_A);

    digitalWrite(MOTOR_IN1, HIGH);  
    digitalWrite(MOTOR_IN2, LOW);    
    analogWrite(MOTOR_ENA, 0);   

    attachInterrupt(digitalPinToInterrupt(ENC_IN), updateEncoder, FALLING);

    previousMillis = millis();
    lcd.setCursor(0, 0);
    lcd.print("Set Rotations:");
}

void loop() {
    int buttonState = digitalRead(BUTTON_PIN);
    if (settingRotations) {
        currentCLK = digitalRead(ENC_A);
        if (currentCLK != lastCLK) {
            if (digitalRead(ENC_B) != currentCLK) {
                encoderValue++;
            } else {
                encoderValue--;
            }
            valueChanged = true;
        }
        lastCLK = currentCLK;

        if (valueChanged) {
            lcd.clear();
            lcd.print("Set Rotations:");
            lcd.setCursor(0, 1);
            lcd.print("Rotations: ");
            lcd.print(encoderValue);
            lcd.print("   ");
            valueChanged = false;
        }

        if (buttonState == HIGH) {
            targetRotations = encoderValue;
            settingRotations = false;
            settingPosition = true;
            encoderValue = 0;
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Set Position *10 grade:");
            delay(200);  // Debounce
        }
    }

    if (settingPosition) {
        currentCLK = digitalRead(ENC_A);
        if (currentCLK != lastCLK) {
            if (digitalRead(ENC_B) != currentCLK) {
                encoderValue++;
            } else {
                encoderValue--;
            }
            valueChanged = true;
        }
        lastCLK = currentCLK;

        if (valueChanged) {
            lcd.setCursor(0, 1);
            lcd.print("Position: ");
            lcd.print(encoderValue);
            valueChanged = false;
        }

        if (digitalRead(BUTTON_PIN) == HIGH) {
            highSignalCount++;  
        } else {
            highSignalCount = 0;  
        }

        if (highSignalCount >= 100) {
            targetPosition = encoderValue*10; 
            settingPosition = false;      
            moveMotor = true;              
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Start");
            delay(200);
        }
    }

if (moveMotor) {
   static int encoderValueRPM = 0; 
  int potValue = analogRead(speedcontrol);
    RPM_d = map(potValue, 0, 1023, 0, 230);  
    currentMillis = millis();
    if (currentMillis - previousMillis > interval  ) {
        previousMillis = currentMillis;


        rpm = (float)(encoderValueM * 60 / IMPULSURI_PER_ROTATIE);  

        e = RPM_d - rpm;
        inte = inte_prev + (e * (currentMillis - t_prev)) / 2000.0;
        float de = (e - e_prev) / ((currentMillis - t_prev) / 1000.0);
        float V = kp * e + ki * inte + kd * de;

        // LimitÄƒm tensiunea de control
        V = constrain(V, -5.0, 5.0);

        WriteDriverVoltage(V);
        angularPosition = (encoderValue * 360.0 / IMPULSURI_PER_ROTATIE);

        lcd.setCursor(0, 1);  
        lcd.print(angularPosition, 1); 
        lcd.print(" dgrade");
        lcd.setCursor(0, 0); 
        lcd.print("RPM: ");
        lcd.print(rpm);

        encoderValueRPM += encoderValueM;
        encoderValueM = 0;
        t_prev = currentMillis;
        e_prev = e;
        inte_prev = inte;
    }

    int totalImpulsuri = targetRotations * IMPULSURI_PER_ROTATIE;
    int impulsuriPozitionare = (targetPosition / 360.0) * IMPULSURI_PER_ROTATIE;
    int totalImpulsuriCuPozitionare = totalImpulsuri + impulsuriPozitionare;

    if (encoderValueRPM >= totalImpulsuriCuPozitionare) {
        WriteDriverVoltage(0);  
      moveMotor = false;
      moveToHome = true;
      encoderValueM = 0; 
      homeEncoderCount = 0;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Returning Home...");
      delay(50);
    }
}
if (moveToHome) {
  float e_position = homePosition - angularPosition;
    int impulsuriHome = (e_position / 360.0) * IMPULSURI_PER_ROTATIE;

     if (currentMillis - previousMillis > interval  ) {
        previousMillis = currentMillis;

        e_home = impulsuriHome - homeEncoderCount;
        inte = inte_home + e_home * (currentMillis - t_prev) / 2000.0;  
        float V_home = kp_home * e_home + ki_home * inte_home ;
        V_home = constrain(V_home, -5.0, 5.0);

        WriteDriverVoltage(-V_home);  //pt directie opusa

        homeEncoderCount += encoderValue;
        encoderValue = 0;

        if (homeEncoderCount >= impulsuriHome) {
            WriteDriverVoltage(0);  
            moveToHome = false;
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Home reached!");
        }

        e_prev_home = e_home;
        t_prev = currentMillis;
        inte_home = inte;
     }
 }
}

void updateEncoder() {
//senzor fotoelectric
    encoderValueM++;
}  
